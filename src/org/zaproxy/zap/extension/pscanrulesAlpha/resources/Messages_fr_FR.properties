#X-Generator: crowdin.com
# This file defines the default (English) variants of all of the internationalised messages
pscanalpha.desc=R\u00e8gles de balayage passif - alpha

pscanalpha.cookiesamesitescanner.name=Cookie Without SameSite Attribute
pscanalpha.cookiesamesitescanner.desc=A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. \nThe SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanalpha.cookiesamesitescanner.badval=A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a 'cross-site' request. \nThe SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
pscanalpha.cookiesamesitescanner.soln=Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.
pscanalpha.cookiesamesitescanner.refs=https\://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site

pscanalpha.examplefile.name=Un exemple de r\u00e8gle de balayage passif qui charge les donn\u00e9es d'un fichier
pscanalpha.examplefile.desc=Ajouter plus d'informations sur la vuln\u00e9rabilit\u00e9 ici
pscanalpha.examplefile.other=Pour des informations ne rentrant dans aucune des autres sections
pscanalpha.examplefile.soln=Une description g\u00e9n\u00e9rale sur la mani\u00e8re de r\u00e9soudre le probl\u00e8me
pscanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-passive-scan-rules.html

pscanalpha.insecureformload.name=Transition de HTTP vers HTTPS dangereuse lors de l'envoi du formulaire
pscanalpha.insecureformload.desc=Cette v\u00e9rification recherche des pages HTTP non s\u00e9curis\u00e9es qui h\u00e9bergent des formulaires HTTPS. Le probl\u00e8me est qu\u2019une page HTTP non s\u00e9curis\u00e9e peut facilement \u00eatre d\u00e9tourn\u00e9e par MITM et le formulaire HTTPS s\u00e9curis\u00e9 peut \u00eatre remplac\u00e9 ou usurp\u00e9.
pscanalpha.insecureformload.refs=\ 
pscanalpha.insecureformload.soln=Utilisez HTTPS pour des pages h\u00e9bergeant des formulaires s\u00e9curis\u00e9s.
pscanalpha.insecureformload.exploit=\ 
pscanalpha.insecureformload.extrainfo=La r\u00e9ponse \u00e0 la requ\u00eate HTTP suivante inclut une valeur d\u2019attribut de l''action du formulaire HTTPS\:\n\n{0}Le contexte \u00e9tait\:\n\n{1}

pscanalpha.insecureformpost.name=Transition de HTTPS vers HTTP dangereuse lors de l'envoi du formulaire
pscanalpha.insecureformpost.desc=Cette v\u00e9rification identifie les pages HTTPS s\u00e9curis\u00e9es h\u00e9bergeant un formulaire HTTP non s\u00e9curis\u00e9. Le probl\u00e8me est qu\u2019une page s\u00e9curis\u00e9e bascule vers une page non s\u00e9curis\u00e9e lorsque des donn\u00e9es sont transf\u00e9r\u00e9es au tranvers d\u2019un formulaire. L\u2019utilisateur peut penser qu\u2019il envoie des donn\u00e9es vers une page s\u00e9curis\u00e9e, alors qu'elles ne le sont pas.
pscanalpha.insecureformpost.refs=\ 
pscanalpha.insecureformpost.soln=Assurez-vous que des donn\u00e9es sensibles ne sont envoy\u00e9es que sur des canaux s\u00e9curis\u00e9s HTTPS.
pscanalpha.insecureformpost.exploit=\ 
pscanalpha.insecureformpost.extrainfo=La r\u00e9ponse \u00e0 la requ\u00eate HTTPS suivante inclut une valeur d\u2019attribut de l''action du formulaire HTTP\:\n\n{0}Le contexte \u00e9tait\:\n\n{1}

pscanalpha.usercontrolledcharset.name=Jeu de caract\u00e8res contr\u00f4lable par l\u2019utilisateur
pscanalpha.usercontrolledcharset.desc=Cette v\u00e9rification v\u00e9rifie l'entr\u00e9e fournie par l\u2019utilisateur dans les param\u00e8tres de cha\u00eene de requ\u00eate et les donn\u00e9es POST pour identifier o\u00f9 le Content-Type ou le meta tag charset pourraient \u00eatre contr\u00f4l\u00e9s par l\u2019utilisateur. Ces d\u00e9clarations de charset devraient toujours \u00eatre d\u00e9clar\u00e9es par l\u2019application. Si un attaquant peut contr\u00f4ler le jeu de caract\u00e8res de la r\u00e9ponse, il pourrait manipuler le code HTML pour ex\u00e9cuter des XSS ou d'autres attaques.
pscanalpha.usercontrolledcharset.refs=\ 
pscanalpha.usercontrolledcharset.soln=Imposez UTF-8 dans toutes les d\u00e9clarations de jeu de caract\u00e8res. Si l\u2019entr\u00e9e utilisateur doit d\u00e9cider d\u2019une d\u00e9claration de charset, veillez \u00e0 ce que seule une liste autoris\u00e9e est utilis\u00e9e.
pscanalpha.usercontrolledcharset.exploit=Un attaquant contr\u00f4lant la valeur de jeu de caract\u00e8res de l\u2019\u00e9l\u00e9ment <meta> est en mesure de d\u00e9clarer UTF-7 et peut \u00e9galement inclure une charge utile dans le document HTML, afin qu\u2019elle soit par la suite interpr\u00e9t\u00e9e comme UTF-7. En encodant sa charge utile avec UTF-7, l\u2019attaquant peut contourner les protections XSS du c\u00f4t\u00e9 serveur et int\u00e9grer un script dans la page.
pscanalpha.usercontrolledcharset.extrainfo=Un attribut [{1}] de la balise [{0}] \n\nL\u2019entr\u00e9e utilisateur trouv\u00e9e \u00e9tait\:\n{2} \={3}\n\nLa valeur du jeu de caract\u00e8re contr\u00f4l\u00e9e \u00e9tait\:\n{4}

pscanalpha.usercontrolledcookie.name=Empoisonnement de cookie
pscanalpha.usercontrolledcookie.desc=Cette v\u00e9rification porte sur l'entr\u00e9e fournie par l\u2019utilisateur dans les param\u00e8tres de cha\u00eene de requ\u00eate et dans les donn\u00e9es POST, afin d'identifier o\u00f9 les param\u00e8tres de cookie peuvent \u00eatre contr\u00f4l\u00e9s. Ceci s\u2019appelle un empoisonnement de cookie, et cela peut devenir exploitable dans certaines conditions. Cependant, permettre \u00e0 des param\u00e8tres d\u2019URL de d\u00e9finir des valeurs de cookie est g\u00e9n\u00e9ralement consid\u00e9r\u00e9 comme un bogue.
pscanalpha.usercontrolledcookie.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-cookie
pscanalpha.usercontrolledcookie.soln=Ne laissez pas les entr\u00e9es utilisateur contr\u00f4ler les noms de cookie ou leurs valeurs. Si certains param\u00e8tres de requ\u00eate doivent \u00eatre d\u00e9finis dans les valeurs du cookie, assurez-vous de filtrer les points-virgules qui peuvent servir de d\u00e9limiteurs de paire nom/valeur.
pscanalpha.usercontrolledcookie.exploit.get=Un attaquant peut \u00eatre capable d\u2019empoisonner les valeurs du cookie par l\u2019interm\u00e9diaire de param\u00e8tres d\u2019URL.  Essayez d\u2019injecter un point-virgule pour voir si vous pouvez ajouter des valeurs au cookie (p.ex. nom\=controlledValue; nom\=anotherValue;).
pscanalpha.usercontrolledcookie.exploit.post=Un attaquant peut \u00eatre capable d\u2019empoisonner les valeurs du cookie par l\u2019interm\u00e9diaire de param\u00e8tres POST. Afin de v\u00e9rifier s\u2019il s\u2019agit d\u2019un probl\u00e8me plus grave, vous devriez essayer de renvoyer cette requ\u00eate sous forme de GET, avec le param\u00e8tre POST inclu comme param\u00e8tre dans la requ\u00eate. Par exemple\: http\://nottrusted.com/page?value\=maliciousInput.  \n\n
pscanalpha.usercontrolledcookie.extrainfo=Cela a \u00e9t\u00e9 identifi\u00e9 \u00e0\:\n\n{0}\n\nL\u2019entr\u00e9e utilisateur a \u00e9t\u00e9 trouv\u00e9e dans le cookie suivant\:\n{1}\n\nL\u2019entr\u00e9e utilisateur \u00e9tait\:\n{2} \={3}

pscanalpha.usercontrolledjavascriptevent.name=\u00c9v\u00e9nement JavaScript contr\u00f4lable par l'utilisateur (XSS)
pscanalpha.usercontrolledjavascriptevent.desc=Cette v\u00e9rification porte sur l\u2019entr\u00e9e utilisateur fournie en param\u00e8tre de requ\u00eate et sur les donn\u00e9es POST, afin d'identifier o\u00f9 certaines valeurs d\u2019attribut HTML peuvent \u00eatre contr\u00f4l\u00e9es. Ceci d\u00e9tecte des "points chauds" pour le XSS (cross-site scripting), qui n\u00e9cessiteront un examen plus approfondi par un analyste de s\u00e9curit\u00e9 pour en d\u00e9terminer l\u2019exploitabilit\u00e9.            
pscanalpha.usercontrolledjavascriptevent.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-javascript-event
pscanalpha.usercontrolledjavascriptevent.soln=Validez toutes les entr\u00e9es et assainissez les sorties avant d\u2019\u00e9crire sur un quelconque \u00e9v\u00e9nement javascript on*.
pscanalpha.usercontrolledjavascriptevent.exploit=\ 
pscanalpha.usercontrolledjavascriptevent.extrainfo=Au moins un \u00e9v\u00e9nement javascript contr\u00f4l\u00e9 par l\u2019utilisateur a \u00e9t\u00e9 trouv\u00e9. L''exploitabilit\u00e9 devra \u00eatre d\u00e9termin\u00e9e manuellement. La page \u00e0 l\u2019adresse\:\n\n{0}"\n\ninclut l\u2019\u00e9v\u00e9nement Javascript suivant qui peut \u00eatre contr\u00f4l\u00e9 par l\u2019attaquant\:\n\nL''entr\u00e9e utilisateur a \u00e9t\u00e9 trouv\u00e9e dans les donn\u00e9es suivantes d\u2019un \u00e9v\u00e9nement [{1}]\:\n{2}\n\nL\u2019entr\u00e9e utilisateur \u00e9tait\:\n{3}

pscanalpha.usercontrolledjavascriptproperty.name=Propri\u00e9t\u00e9 JavaScript contr\u00f4lable par l'utilisateur (XSS)
pscanalpha.usercontrolledjavascriptproperty.desc=Cette v\u00e9rification porte sur l\u2019entr\u00e9e utilisateur fournie en param\u00e8tre de requ\u00eate et sur les donn\u00e9es POST, afin d'identifier o\u00f9 certaines propri\u00e9t\u00e9s javascript (p.ex. createElement src) peuvent \u00eatre contr\u00f4l\u00e9es. Ceci d\u00e9tecte des "points chauds" pour le XSS (cross-site scripting), qui n\u00e9cessiteront un examen plus approfondi par un analyste de s\u00e9curit\u00e9 pour en d\u00e9terminer l\u2019exploitabilit\u00e9.            
pscanalpha.usercontrolledjavascriptproperty.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-javascript-reference
pscanalpha.usercontrolledjavascriptproperty.soln=Ne permettez pas axu entr\u00e9es utilisateur de contr\u00f4ler les r\u00e9f\u00e9rences de localisation de source javascript.
pscanalpha.usercontrolledjavascriptproperty.exploit=\ 
pscanalpha.usercontrolledjavascriptproperty.extrainfo=La page \u00e0 l\u2019adresse suivante semble contenir des entr\u00e9es utilisateur dans une valeur de propri\u00e9t\u00e9 javascript\:\n\n{0}L\u2019entr\u00e9e utilisateur trouv\u00e9e \u00e9tait\:\n{1} \={2}\n\nLe contexte \u00e9tait\:\n{3}

pscanalpha.usercontrolledhtmlattributes.name=Attribut d\u2019\u00e9l\u00e9ment HTML contr\u00f4lable par l\u2019utilisateur (XSS potentiel)
pscanalpha.usercontrolledhtmlattributes.desc=This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
pscanalpha.usercontrolledhtmlattributes.refs=http\://websecuritytool.codeplex.com/wikipage?title\=Checks\#user-controlled-html-attribute
pscanalpha.usercontrolledhtmlattributes.soln=Validate all input and sanitize output it before writing to any HTML attributes.
pscanalpha.usercontrolledhtmlattributes.exploit=\ 
pscanalpha.usercontrolledhtmlattributes.extrainfo=User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL\:\r\n\r\n{0}\r\n\r\nappears to include user input in\: \r\n\r\na(n) [{1}] tag [{2}] attribute \r\n\r\nThe user input found was\:\r\n{3}\={4}\r\n\r\nThe user-controlled value was\:\r\n{5}

pscanalpha.usercontrolledopenredirect.name=Open Redirect
pscanalpha.usercontrolledopenredirect.desc=Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http\://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks
pscanalpha.usercontrolledopenredirect.soln=To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains
pscanalpha.usercontrolledopenredirect.exploit=An attacker could supply a user with the following link\: http\://example.com/example.php?url\=http\://malicious.example.com
pscanalpha.usercontrolledopenredirect.refs=https\://www.owasp.org/index.php/Open_redirect\nhttps\://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards\nhttps\://cwe.mitre.org/data/definitions/601.html
pscanalpha.usercontrolledopenredirect.extrainfo.get=The 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.post=An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example\: http\://nottrusted.com/page?url\=http\://lookout.net.\r\n\r\nThe 301 or 302 response to a request for the following URL appeared to contain user input in the location header\:\r\n\r\n
pscanalpha.usercontrolledopenredirect.extrainfo.common={0}\r\n\r\nThe user input found was\:\r\n\r\n{1}\={2}\r\n\r\nThe context was\:\r\n\r\n{3}

pscanalpha.sourcecodedisclosure.name=Source Code Disclosure
pscanalpha.sourcecodedisclosure.desc=Application Source Code was disclosed by the web server
pscanalpha.sourcecodedisclosure.soln=Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server. 
pscanalpha.sourcecodedisclosure.refs=http\://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/
pscanalpha.sourcecodedisclosure.extrainfo={0}

pscanalpha.hashdisclosure.name=Hash Disclosure
pscanalpha.hashdisclosure.desc=A hash was disclosed by the web server
pscanalpha.hashdisclosure.soln=Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.      
pscanalpha.hashdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage\nhttp\://openwall.info/wiki/john/sample-hashes
pscanalpha.hashdisclosure.extrainfo={0}

pscanalpha.timestampdisclosure.name=Timestamp Disclosure
pscanalpha.timestampdisclosure.desc=A timestamp was disclosed by the application/web server
pscanalpha.timestampdisclosure.soln=Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
pscanalpha.timestampdisclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.timestampdisclosure.extrainfo={0}, which evaluates to\: {1}

pscanalpha.base64disclosure.name=Base64 Disclosure
pscanalpha.base64disclosure.desc=Base64 encoded data was disclosed by the application/web server
pscanalpha.base64disclosure.soln=Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.refs=https\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.extrainfo={1}

pscanalpha.base64disclosure.viewstate.name=ASP.NET ViewState Disclosure
pscanalpha.base64disclosure.viewstate.desc=An ASP.NET ViewState was disclosed by the application/web server
pscanalpha.base64disclosure.viewstate.soln=Manually confirm that the ASP.NET ViewState does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
pscanalpha.base64disclosure.viewstate.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp\://projects.webappsec.org/w/page/13246936/Information%20Leakage
pscanalpha.base64disclosure.viewstate.extrainfo={0}

pscanalpha.base64disclosure.viewstatewithoutmac.name=ASP.NET ViewState Integrity
pscanalpha.base64disclosure.viewstatewithoutmac.desc=The application does not use a Message Authentication Code (MAC) to protect the integrity of the ASP.NET ViewState, which can be tampered with by a malicious client
pscanalpha.base64disclosure.viewstatewithoutmac.soln=Ensure that all ASP.NET ViewStates are protected from tampering, by using a MAC, generated using a secure algorithm, and a secret key on the server side. This is the default configuration on modern ASP.NET installation, by may be over-ridden programatically, or via the ASP.NET configuration.
pscanalpha.base64disclosure.viewstatewithoutmac.refs=http\://msdn.microsoft.com/en-us/library/bb386448.aspx\nhttps\://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/
pscanalpha.base64disclosure.viewstatewithoutmac.extrainfo={0}

pscanalpha.directorybrowsing.name=Directory Browsing
pscanalpha.directorybrowsing.desc=It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files , backup source files, etc, which be accessed to reveal sensitive information.
pscanalpha.directorybrowsing.soln=Configure the web server to disable directory browsing. 
pscanalpha.directorybrowsing.refs=https\://cwe.mitre.org/data/definitions/548.html
pscanalpha.directorybrowsing.extrainfo={0}

pscanalpha.heartbleed.name=Heartbleed OpenSSL Vulnerability (Indicative)
pscanalpha.heartbleed.desc=The TLS and DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.\t
pscanalpha.heartbleed.soln=Mettez \u00e0 jour OpenSSL avec la version 1.0.1g ou ult\u00e9rieure. R\u00e9-\u00e9mettez les certificats HTTPS. Changer les cl\u00e9s priv\u00e9es asym\u00e9triques et les cl\u00e9s secr\u00e8tes partag\u00e9es, car elles peuvent avoir \u00e9t\u00e9 compromises, sans aucun avertissement dans les fichiers journaux du serveur.
pscanalpha.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
pscanalpha.heartbleed.extrainfo={0} is in use. Note however that the reported version could contain back-ported security fixes, and so the issue could be a false positive. This is common on Red Hat, for instance.

pscanalpha.crossdomain.name=Mauvaise configuration inter-domaines
pscanalpha.crossdomain.desc=Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server
pscanalpha.crossdomain.soln=Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.
pscanalpha.crossdomain.refs=http\://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html
pscanalpha.crossdomain.extrainfo=The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.

pscanalpha.serverheaderversioninfoleak.name=Server Leaks Version Information via "Server" HTTP Response Header Field
pscanalpha.serverheaderversioninfoleak.desc=The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
pscanalpha.serverheaderversioninfoleak.refs=http\://httpd.apache.org/docs/current/mod/core.html\#servertokens\nhttp\://msdn.microsoft.com/en-us/library/ff648552.aspx\#ht_urlscan_007\nhttp\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.serverheaderversioninfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
pscanalpha.serverheaderversioninfoleak.exploit=\ 
pscanalpha.serverheaderversioninfoleak.extrainfo=\ 

pscanalpha.stricttransportsecurity.scanner.name=Strict-Transport-Security Header Scanner
pscanalpha.stricttransportsecurity.name=Strict-Transport-Security Header Not Set
pscanalpha.stricttransportsecurity.desc=HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
pscanalpha.stricttransportsecurity.refs=https\://www.owasp.org/index.php/HTTP_Strict_Transport_Security\nhttps\://www.owasp.org/index.php/List_of_useful_HTTP_headers\nhttp\://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp\://caniuse.com/stricttransportsecurity\nhttp\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.soln=Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
pscanalpha.stricttransportsecurity.max.age.name=Strict-Transport-Security Disabled
pscanalpha.stricttransportsecurity.max.age.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains the directive max-age\=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.max.age.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.max.age.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanalpha.stricttransportsecurity.compliance.multiple.header.name=Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.multiple.header.desc=HTTP Strict Transport Security (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.multiple.header.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.compliance.multiple.header.soln=Ensure that only one component in your stack\: code, web server, application server, load balancer, etc. is configured to set or add a HTTP Strict-Transport-Security (HSTS) header.
pscanalpha.stricttransportsecurity.plain.resp.name=Strict-Transport-Security Header on Plain HTTP Response
pscanalpha.stricttransportsecurity.plain.resp.desc=A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.plain.resp.refs=http\://tools.ietf.org/html/rfc6797\#section-8.1
pscanalpha.stricttransportsecurity.plain.resp.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security for HTTPS responses.
pscanalpha.stricttransportsecurity.compliance.max.age.missing.name=Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.missing.desc=A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.missing.refs=http\://tools.ietf.org/html/rfc6797\#section-6.2
pscanalpha.stricttransportsecurity.compliance.max.age.missing.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.
pscanalpha.stricttransportsecurity.compliance.meta.name=Strict-Transport-Security Defined via META (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.meta.desc=A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).
pscanalpha.stricttransportsecurity.compliance.meta.refs=http\://tools.ietf.org/html/rfc6797\#section-8.5
pscanalpha.stricttransportsecurity.compliance.meta.soln=Do not attempt to set HTTP Strict Transport Security (HSTS) via a META tag.
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.name=Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.refs=http\://tools.ietf.org/html/rfc6797\#section-6.1
pscanalpha.stricttransportsecurity.compliance.max.age.malformed.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format.
pscanalpha.stricttransportsecurity.compliance.malformed.content.name=Strict-Transport-Security Malformed Content (Non-compliant with Spec)
pscanalpha.stricttransportsecurity.compliance.malformed.content.desc=A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.
pscanalpha.stricttransportsecurity.compliance.malformed.content.refs=http\://tools.ietf.org/html/rfc6797
pscanalpha.stricttransportsecurity.compliance.malformed.content.soln=Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content. 

pscanalpha.xpoweredbyheaderinfoleak.name=Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
pscanalpha.xpoweredbyheaderinfoleak.desc=The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
pscanalpha.xpoweredbyheaderinfoleak.refs=http\://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp\://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
pscanalpha.xpoweredbyheaderinfoleak.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
pscanalpha.xpoweredbyheaderinfoleak.exploit=\ 
pscanalpha.xpoweredbyheaderinfoleak.extrainfo=\ 
pscanalpha.xpoweredbyheaderinfoleak.otherinfo.msg=The following X-Powered-By headers were also found\:\r\n

pscanalpha.contentsecuritypolicymissing.name=Content Security Policy (CSP) Header Not Set
pscanalpha.contentsecuritypolicymissing.desc=Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.refs=https\://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps\://www.owasp.org/index.php/Content_Security_Policy\nhttp\://www.w3.org/TR/CSP/\nhttp\://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp\://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/
pscanalpha.contentsecuritypolicymissing.soln=Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support\: "Content-Security-Policy" for Chrome 25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome 14+ and Safari 6+.
pscanalpha.contentsecuritypolicymissing.exploit=\ 
pscanalpha.contentsecuritypolicymissing.extrainfo=\ 
pscanalpha.contentsecuritypolicymissing.ro.name=Content Security Policy (CSP) Report-Only Header Found
pscanalpha.contentsecuritypolicymissing.ro.desc=The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
pscanalpha.contentsecuritypolicymissing.ro.refs=https\://www.w3.org/TR/CSP2/\nhttps\://w3c.github.io/webappsec-csp/\nhttp\://caniuse.com/\#feat\=contentsecuritypolicy\nhttp\://content-security-policy.com/

pscanalpha.xbackendserver.name=X-Backend-Server Header Information Leak
pscanalpha.xbackendserver.desc=The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
pscanalpha.xbackendserver.refs=\ 
pscanalpha.xbackendserver.soln=Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.
pscanalpha.xbackendserver.exploit=\ 
pscanalpha.xbackendserver.extrainfo=\ 

pscanalpha.insecurecomponent.name=Insecure Component
pscanalpha.insecurecomponent.desc=Based on passive analysis of the response, insecure component {0} {1} appears to be in use.\nThe highest noted CVSS rating for this product version is {2}.\nIn total, {3} vulnerabilities were noted.\nSome Linux distributions such as Red Hat employ the practice of retaining old version numbers when security fixes are "backported".\nThese cases are noted as "False Positives", but should be manually verified.  
pscanalpha.insecurecomponent.refs={0}
pscanalpha.insecurecomponent.soln=Upgrade from {0} {1} to the latest stable version of the product.\nUse a package manager and package management policies and procedures to manage the installed versions of software packages.

pscanalpha.bigredirectsscanner.name=Big Redirect Detected (Potential Sensitive Information Leak)
pscanalpha.bigredirectsscanner.desc=The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc).
pscanalpha.bigredirectsscanner.refs=\ 
pscanalpha.bigredirectsscanner.soln=Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
pscanalpha.bigredirectsscanner.extrainfo=Location header URI length\: {0} [{1}].\nPredicted response size\: {2}.\nResponse Body Length\: {3}.


pscanalpha.storabilitycacheability.name=Content Cacheability

pscanalpha.nonstorable.name=Non-Storable Content
pscanalpha.nonstorable.desc=The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.
pscanalpha.nonstorable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.nonstorable.soln=The content may be marked as storable by ensuring that the following conditions are satisfied\:\nThe request method must be understood by the cache and defined as being cacheable ("GET", "HEAD", and "POST" are currently defined as cacheable)\nThe response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)\nThe "no-store" cache directive must not appear in the request or response header fields\nFor caching by "shared" caches such as "proxy" caches, the "private" response directive must not appear in the response\nFor caching by "shared" caches such as "proxy" caches, the "Authorization" header field must not appear in the request, unless the response explicitly allows it (using one of the "must-revalidate", "public", or "s-maxage" Cache-Control response directives)\nIn addition to the conditions above, at least one of the following conditions must also be satisfied by the response\:\nIt must contain an "Expires" header field\nIt must contain a "max-age" response directive\nFor "shared" caches such as "proxy" caches, it must contain a "s-maxage" response directive\nIt must contain a "Cache Control Extension" that allows it to be cached\nIt must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).   
pscanalpha.nonstorable.extrainfo={0}

pscanalpha.storablenoncacheable.name=Storable but Non-Cacheable Content
pscanalpha.storablenoncacheable.desc=The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. 
pscanalpha.storablenoncacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablenoncacheable.soln=\ 
pscanalpha.storablenoncacheable.extrainfo={0}}

pscanalpha.storablecacheable.name=Storable and Cacheable Content
pscanalpha.storablecacheable.desc=The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where "shared" caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.
pscanalpha.storablecacheable.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.storablecacheable.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. 
pscanalpha.storablecacheable.extrainfo={0}
pscanalpha.storablecacheable.otherinfo.liberallifetimeheuristic=In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.
pscanalpha.storablecacheable.otherinfo.staleretrievenotblocked=The response is stale, and stale responses are not configured to be re-validated or blocked, using the 'must-revalidate', 'proxy-revalidate', 's-maxage', or 'max-age' response 'Cache-Control' directives.

pscanalpha.retrievedfromcache.name=Retrieved from Cache
pscanalpha.retrievedfromcache.desc=The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. 
pscanalpha.retrievedfromcache.refs=https\://tools.ietf.org/html/rfc7234\nhttps\://tools.ietf.org/html/rfc7231\nhttp\://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)
pscanalpha.retrievedfromcache.soln=Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user\:\nCache-Control\: no-cache, no-store, must-revalidate, private\nPragma\: no-cache\nExpires\: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.
pscanalpha.retrievedfromcache.extrainfo={0}
pscanalpha.retrievedfromcache.extrainfo.http11ageheader=The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.

pscanalpha.imagelocationscanner.name=Image Location Scanner
pscanalpha.imagelocationscanner.alerttitle=Image Contains Embedded Location Information
pscanalpha.imagelocationscanner.alertDetailPrefix=This image contains the following embedded location information\:
pscanalpha.imagelocationscanner.desc=The image was found to contain embedded location information, such as GPS coordinates.  Depending on the context of the image in the website, this information may expose private details of the users of a site.  For example, a site that allows users to upload profile pictures taken in the home may expose the home's address.  
pscanalpha.imagelocationscanner.refs=http\://www.veggiespam.com/ils/
pscanalpha.imagelecationscanner.soln=Before allowing images to be stored on the server and/or transmitted to the browser, strip out the embedded location information from image.  This could mean removing all Exif data or just the GPS component.

pscanalpha.xchromeloggerdata.name=X-ChromeLogger-Data (XCOLD) Header Information Leak
pscanalpha.xchromeloggerdata.desc=The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Date) response header. The content of such headers can be customized by the developer, however it is not uncommon to find\: server file system locations, vhost declarations, etc.
pscanalpha.xchromeloggerdata.refs=https\://craig.is/writing/chrome-logger
pscanalpha.xchromeloggerdata.soln=Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.
pscanalpha.xchromeloggerdata.otherinfo.msg=The following represents an attempt to base64 decode the value\:
pscanalpha.xchromeloggerdata.otherinfo.error=Header value could not be base64 decoded\:

